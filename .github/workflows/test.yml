name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type checking
      run: npm run typecheck
    
    - name: Run tests
      run: npm run test:run
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./backend
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Run tests with coverage
      run: npm run test:coverage
    
    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Cache backend node modules
      uses: actions/cache@v4
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-
    
    - name: Cache frontend node modules
      uses: actions/cache@v4
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm install
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        npm start &
        echo "Waiting for backend to be ready..."
        for i in {1..60}; do
          if curl -fsS http://localhost:8000/api/health >/dev/null; then
            echo "Backend is up"; break; fi
          sleep 1
        done
        # Final assert
        curl -f http://localhost:8000/api/health
      env:
        PORT: 8000
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        VITE_API_URL: http://localhost:8000

  python-ml-tests:
    name: Python ML Pipeline Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run Python tests (if they exist)
      run: |
        if [ -d "tests" ] || [ -f "test_*.py" ] || find . -name "*_test.py" | grep -q .; then
          python -m pytest --cov=src --cov-report=xml --cov-report=term
        else
          echo "No Python tests found, skipping..."
        fi
    
    - name: Validate Python syntax
      run: |
        python -m py_compile main.py
        python -m py_compile config.py
        find src -name "*.py" -exec python -m py_compile {} \;

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Run npm audit for frontend
      working-directory: ./frontend
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run npm audit for backend
      working-directory: ./backend
      run: npm audit --audit-level=moderate
      continue-on-error: true
